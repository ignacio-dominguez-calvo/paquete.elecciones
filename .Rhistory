}
}
else{df_final <- resultados_tabla_participacion(df,tipo_eleccion)}
return(invisible(df_final))
}
resultados_tabla_participacion<- function(df,tipo_eleccion){
primer_avance<-sum(df$votantes_primer_avance)
segundo_avance<-sum(df$votantes_segundo_avance)
blanco<-sum(df$votos_en_blanco)
nulo<-sum(df$votos_nulos)
if(tolower(tipo_eleccion) == 'referendum' || tolower(tipo_eleccion) == 'referéndum'){
total<-blanco+nulo+sum(df$votos_negativos_referendum)+sum(df$votos_afirmativos_referendum)
}
else{
total<-blanco+nulo+sum(df$votos_candidaturas)
}
resultados_df <- data.frame(
Categoria = c("Primer avance", "Segundo avance", "Votos en blanco", "Votos nulos"),
Total = c(sum(df$votantes_primer_avance, na.rm = TRUE), sum(df$votantes_segundo_avance, na.rm = TRUE),
sum(df$votos_en_blanco, na.rm = TRUE), sum(df$votos_nulos, na.rm = TRUE)),
Porcentaje = c(sum(df$votantes_primer_avance, na.rm = TRUE) / total * 100,
sum(df$votantes_segundo_avance, na.rm = TRUE) / total * 100,
sum(df$votos_en_blanco, na.rm = TRUE) / total * 100,
sum(df$votos_nulos, na.rm = TRUE) / total * 100)
)
# Función auxiliar para añadir filas al dataframe
if(tolower(tipo_eleccion) == 'referendum' || tolower(tipo_eleccion) == 'referéndum'){
afirmativos<-sum(df$votos_afirmativos_referendum)
negativos<-sum(df$votos_negativos_referendum)
votos_referendum <- afirmativos + negativos
referendum_df <- data.frame(
Categoria = c("Votos referéndum", "Votos afirmativos", "Votos negativos"),
Total = c(votos_referendum, afirmativos, negativos),
Porcentaje = c(votos_referendum / total * 100, afirmativos / votos_referendum * 100, negativos / votos_referendum * 100)
)
cat(
sprintf("%-21s | %15s | %12s", "Datos Referéndum", "Totales", "Porcentaje"), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Primer avance", primer_avance, primer_avance / total * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Segundo avance", segundo_avance, segundo_avance / total * 100), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos en blanco", blanco, blanco / total * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos nulos", nulo, nulo / total * 100), "\n",
sprintf("%-21s | %15d | %12.2f%%", "Votos referéndum", votos_referendum, votos_referendum / total * 100), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos afirmativos", afirmativos, afirmativos / votos_referendum * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos negativos", negativos, negativos / votos_referendum * 100), "\n",
"_____________________________________________________________", "\n",
sep=""
)
}
else{
votos_candidaturas<-sum(df$votos_candidaturas)
referendum_df <- data.frame(
Categoria = c("Votos candidaturas"),
Total = c(votos_candidaturas),
Porcentaje = c(votos_candidaturas / total * 100)
)
print(sprintf("%-20s | %15s | %12s", "Datos ", "Totales", "Porcentaje"))
print("_____________________________________________________________")
print(sprintf("%-20s | %15d | %12.2f%%", "Primer avance", primer_avance, primer_avance / total * 100))
print(sprintf("%-20s | %15d | %12.2f%%", "Segundo avance", segundo_avance, segundo_avance / total * 100))
print("_____________________________________________________________")
print(sprintf("%-20s | %15d | %12.2f%%", "Votos en blanco", blanco, blanco / total * 100))
print(sprintf("%-20s | %15d | %12.2f%%", "Votos nulos", nulo, nulo / total * 100))
print(sprintf("%-20s | %15d | %12.2f%%", "Votos candidaturas", votos_candidaturas, votos_candidaturas / total * 100))
}
resultados_df <- rbind(resultados_df, referendum_df)
return(resultados_df)
}
df2<-tabla_participacion('referendum',2005,2,'valladolid')
tabla_participacion('referendum',2005,2,'valladolid')
#' filtra los datos para esa provincia usando los códigos INE.
#'
#' @param tipo_eleccion Tipo de elección como texto.
#' @param año Año de la elección.
#' @param mes Mes de la elección.
#' @param provincia Nombre de la provincia (opcional).
#' @return Un dataframe invisible con los resultados de participación y una
#'   impresión en consola de los resultados detallados
#' @import dplyr
#' @export
tabla_participacion <- function(tipo_eleccion, año, mes, provincia=NULL) {
ambito='municipio'
if(!is.null(provincia)){
provincia<-tolower(provincia)
}
df <- leer_tabla(tipo_eleccion, año, mes, ambito, directorio = "./descargas/", tabla = '05')
if(!is.null(provincia)) {
ine_codes <- data.frame(
INE_CODE = as.numeric(c(2, 3, 4, 1, 33, 5, 6, 7, 8, 48, 9, 10, 11, 39, 12, 13, 14, 15,
16, 20, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35,
36, 26, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52)),
PROVINCE = tolower(c("Albacete", "Alicante", "Almería", "Araba/Álava", "Asturias", "Ávila", "Badajoz", "Balears, Illes",
"Barcelona", "Bizkaia", "Burgos", "Cáceres", "Cádiz", "Cantabria", "Castellón", "Ciudad Real",
"Córdoba", "A Coruña", "Cuenca", "Gipuzkoa", "Girona", "Granada", "Guadalajara", "Huelva", "Huesca",
"Jaén", "León", "Lleida", "Lugo", "Madrid", "Málaga", "Murcia", "Navarra", "Ourense", "Palencia",
"Las Palmas", "Pontevedra", "La Rioja", "Salamanca", "Santa Cruz de Tenerife", "Segovia", "Sevilla",
"Soria", "Tarragona", "Teruel", "Toledo", "Valencia", "Valladolid", "Zamora", "Zaragoza",
"Ceuta", "Melilla"))
)
provincia_code <- ine_codes$INE_CODE[ine_codes$PROVINCE == provincia]
if (length(provincia_code) > 0) {
df <- df[df$codigo_ine_provincia == provincia_code, ]
df_final <- resultados_tabla_participacion(df,tipo_eleccion)
} else {
stop(paste("Provincia no válida. Lista de provincias válidas:", paste(ine_codes$PROVINCE, collapse=", ")))
}
}
else{df_final <- resultados_tabla_participacion(df,tipo_eleccion)}
return(invisible(df_final))
}
resultados_tabla_participacion<- function(df,tipo_eleccion){
primer_avance<-sum(df$votantes_primer_avance)
segundo_avance<-sum(df$votantes_segundo_avance)
blanco<-sum(df$votos_en_blanco)
nulo<-sum(df$votos_nulos)
if(tolower(tipo_eleccion) == 'referendum' || tolower(tipo_eleccion) == 'referéndum'){
total<-blanco+nulo+sum(df$votos_negativos_referendum)+sum(df$votos_afirmativos_referendum)
}
else{
total<-blanco+nulo+sum(df$votos_candidaturas)
}
resultados_df <- data.frame(
Categoria = c("Primer avance", "Segundo avance", "Votos en blanco", "Votos nulos"),
Total = c(sum(df$votantes_primer_avance, na.rm = TRUE), sum(df$votantes_segundo_avance, na.rm = TRUE),
sum(df$votos_en_blanco, na.rm = TRUE), sum(df$votos_nulos, na.rm = TRUE)),
Porcentaje = c(sum(df$votantes_primer_avance, na.rm = TRUE) / total * 100,
sum(df$votantes_segundo_avance, na.rm = TRUE) / total * 100,
sum(df$votos_en_blanco, na.rm = TRUE) / total * 100,
sum(df$votos_nulos, na.rm = TRUE) / total * 100)
)
# Función auxiliar para añadir filas al dataframe
if(tolower(tipo_eleccion) == 'referendum' || tolower(tipo_eleccion) == 'referéndum'){
afirmativos<-sum(df$votos_afirmativos_referendum)
negativos<-sum(df$votos_negativos_referendum)
votos_referendum <- afirmativos + negativos
referendum_df <- data.frame(
Categoria = c("Votos referéndum", "Votos afirmativos", "Votos negativos"),
Total = c(votos_referendum, afirmativos, negativos),
Porcentaje = c(votos_referendum / total * 100, afirmativos / votos_referendum * 100, negativos / votos_referendum * 100)
)
cat(
sprintf("%-21s | %15s | %12s", "Datos Referéndum", "Totales", "Porcentaje"), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Primer avance", primer_avance, primer_avance / total * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Segundo avance", segundo_avance, segundo_avance / total * 100), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos en blanco", blanco, blanco / total * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos nulos", nulo, nulo / total * 100), "\n",
sprintf("%-21s | %15d | %12.2f%%", "Votos referéndum", votos_referendum, votos_referendum / total * 100), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos afirmativos", afirmativos, afirmativos / votos_referendum * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos negativos", negativos, negativos / votos_referendum * 100), "\n",
"_____________________________________________________________", "\n",
sep=""
)
}
else{
votos_candidaturas<-sum(df$votos_candidaturas)
referendum_df <- data.frame(
Categoria = c("Votos candidaturas"),
Total = c(votos_candidaturas),
Porcentaje = c(votos_candidaturas / total * 100)
)
print(sprintf("%-20s | %15s | %12s", "Datos ", "Totales", "Porcentaje"))
print("_____________________________________________________________")
print(sprintf("%-20s | %15d | %12.2f%%", "Primer avance", primer_avance, primer_avance / total * 100))
print(sprintf("%-20s | %15d | %12.2f%%", "Segundo avance", segundo_avance, segundo_avance / total * 100))
print("_____________________________________________________________")
print(sprintf("%-20s | %15d | %12.2f%%", "Votos en blanco", blanco, blanco / total * 100))
print(sprintf("%-20s | %15d | %12.2f%%", "Votos nulos", nulo, nulo / total * 100))
print(sprintf("%-20s | %15d | %12.2f%%", "Votos candidaturas", votos_candidaturas, votos_candidaturas / total * 100))
}
resultados_df <- rbind(resultados_df, referendum_df)
return(resultados_df)
}
tabla_participacion('referendum',2005,2,'valladolid')
tabla_participacion('referendum',2005,2,'vallsadolid')
#' filtra los datos para esa provincia usando los códigos INE.
#'
#' @param tipo_eleccion Tipo de elección como texto.
#' @param año Año de la elección.
#' @param mes Mes de la elección.
#' @param provincia Nombre de la provincia (opcional).
#' @return Un dataframe invisible con los resultados de participación y una
#'   impresión en consola de los resultados detallados
#' @import dplyr
#' @export
tabla_participacion <- function(tipo_eleccion, año, mes, provincia=NULL) {
ambito='municipio'
if(!is.null(provincia)){
provincia<-tolower(provincia)
}
if(!is.null(provincia)) {
ine_codes <- data.frame(
INE_CODE = as.numeric(c(2, 3, 4, 1, 33, 5, 6, 7, 8, 48, 9, 10, 11, 39, 12, 13, 14, 15,
16, 20, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35,
36, 26, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52)),
PROVINCE = tolower(c("Albacete", "Alicante", "Almería", "Araba/Álava", "Asturias", "Ávila", "Badajoz", "Balears, Illes",
"Barcelona", "Bizkaia", "Burgos", "Cáceres", "Cádiz", "Cantabria", "Castellón", "Ciudad Real",
"Córdoba", "A Coruña", "Cuenca", "Gipuzkoa", "Girona", "Granada", "Guadalajara", "Huelva", "Huesca",
"Jaén", "León", "Lleida", "Lugo", "Madrid", "Málaga", "Murcia", "Navarra", "Ourense", "Palencia",
"Las Palmas", "Pontevedra", "La Rioja", "Salamanca", "Santa Cruz de Tenerife", "Segovia", "Sevilla",
"Soria", "Tarragona", "Teruel", "Toledo", "Valencia", "Valladolid", "Zamora", "Zaragoza",
"Ceuta", "Melilla"))
)
provincia_code <- ine_codes$INE_CODE[ine_codes$PROVINCE == provincia]
if (length(provincia_code) > 0) {
df <- leer_tabla(tipo_eleccion, año, mes, ambito, directorio = "./descargas/", tabla = '05')
df <- df[df$codigo_ine_provincia == provincia_code, ]
df_final <- resultados_tabla_participacion(df,tipo_eleccion)
} else {
stop(paste("Provincia no válida. Lista de provincias válidas:", paste(ine_codes$PROVINCE, collapse=", ")))
}
}
else{
df <- leer_tabla(tipo_eleccion, año, mes, ambito, directorio = "./descargas/", tabla = '05')
df_final <- resultados_tabla_participacion(df,tipo_eleccion)}
return(invisible(df_final))
}
resultados_tabla_participacion<- function(df,tipo_eleccion){
primer_avance<-sum(df$votantes_primer_avance)
segundo_avance<-sum(df$votantes_segundo_avance)
blanco<-sum(df$votos_en_blanco)
nulo<-sum(df$votos_nulos)
if(tolower(tipo_eleccion) == 'referendum' || tolower(tipo_eleccion) == 'referéndum'){
total<-blanco+nulo+sum(df$votos_negativos_referendum)+sum(df$votos_afirmativos_referendum)
}
else{
total<-blanco+nulo+sum(df$votos_candidaturas)
}
resultados_df <- data.frame(
Categoria = c("Primer avance", "Segundo avance", "Votos en blanco", "Votos nulos"),
Total = c(sum(df$votantes_primer_avance, na.rm = TRUE), sum(df$votantes_segundo_avance, na.rm = TRUE),
sum(df$votos_en_blanco, na.rm = TRUE), sum(df$votos_nulos, na.rm = TRUE)),
Porcentaje = c(sum(df$votantes_primer_avance, na.rm = TRUE) / total * 100,
sum(df$votantes_segundo_avance, na.rm = TRUE) / total * 100,
sum(df$votos_en_blanco, na.rm = TRUE) / total * 100,
sum(df$votos_nulos, na.rm = TRUE) / total * 100)
)
# Función auxiliar para añadir filas al dataframe
if(tolower(tipo_eleccion) == 'referendum' || tolower(tipo_eleccion) == 'referéndum'){
afirmativos<-sum(df$votos_afirmativos_referendum)
negativos<-sum(df$votos_negativos_referendum)
votos_referendum <- afirmativos + negativos
referendum_df <- data.frame(
Categoria = c("Votos referéndum", "Votos afirmativos", "Votos negativos"),
Total = c(votos_referendum, afirmativos, negativos),
Porcentaje = c(votos_referendum / total * 100, afirmativos / votos_referendum * 100, negativos / votos_referendum * 100)
)
cat(
sprintf("%-21s | %15s | %12s", "Datos Referéndum", "Totales", "Porcentaje"), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Primer avance", primer_avance, primer_avance / total * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Segundo avance", segundo_avance, segundo_avance / total * 100), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos en blanco", blanco, blanco / total * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos nulos", nulo, nulo / total * 100), "\n",
sprintf("%-21s | %15d | %12.2f%%", "Votos referéndum", votos_referendum, votos_referendum / total * 100), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos afirmativos", afirmativos, afirmativos / votos_referendum * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos negativos", negativos, negativos / votos_referendum * 100), "\n",
"_____________________________________________________________", "\n",
sep=""
)
}
else{
votos_candidaturas<-sum(df$votos_candidaturas)
referendum_df <- data.frame(
Categoria = c("Votos candidaturas"),
Total = c(votos_candidaturas),
Porcentaje = c(votos_candidaturas / total * 100)
)
print(sprintf("%-20s | %15s | %12s", "Datos ", "Totales", "Porcentaje"))
print("_____________________________________________________________")
print(sprintf("%-20s | %15d | %12.2f%%", "Primer avance", primer_avance, primer_avance / total * 100))
print(sprintf("%-20s | %15d | %12.2f%%", "Segundo avance", segundo_avance, segundo_avance / total * 100))
print("_____________________________________________________________")
print(sprintf("%-20s | %15d | %12.2f%%", "Votos en blanco", blanco, blanco / total * 100))
print(sprintf("%-20s | %15d | %12.2f%%", "Votos nulos", nulo, nulo / total * 100))
print(sprintf("%-20s | %15d | %12.2f%%", "Votos candidaturas", votos_candidaturas, votos_candidaturas / total * 100))
}
resultados_df <- rbind(resultados_df, referendum_df)
return(resultados_df)
}
tabla_participacion('referendum',2005,2,'vallsadolid')
tabla_participacion('referendum',2005,2,'valladolid')
tabla_participacion('congreso',2019,4)
#'
#' Dada una tabla de datos, esta función suma los votos y calcula los porcentajes
#' de participación para diferentes categorías como avances de votación, votos en blanco,
#' y votos nulos. Si el tipo de elección es un referéndum, también procesa votos afirmativos
#' y negativos.
#'
#' @param df Dataframe con los datos electorales.
#' @param tipo_eleccion Tipo de elección para determinar si se incluyen resultados de referéndum.
#' @return Un dataframe con las categorías de votación y sus totales y porcentajes.
#' @export
-
primer_avance<-sum(df$votantes_primer_avance)
#'
#' Dada una tabla de datos, esta función suma los votos y calcula los porcentajes
#' de participación para diferentes categorías como avances de votación, votos en blanco,
#' y votos nulos. Si el tipo de elección es un referéndum, también procesa votos afirmativos
#' y negativos.
#'
#' @param df Dataframe con los datos electorales.
#' @param tipo_eleccion Tipo de elección para determinar si se incluyen resultados de referéndum.
#' @return Un dataframe con las categorías de votación y sus totales y porcentajes.
#' @export
-
#' Calcula los resultados de participación para un dataframe dado
#'
#' Dada una tabla de datos, esta función suma los votos y calcula los porcentajes
#' de participación para diferentes categorías como avances de votación, votos en blanco,
#' y votos nulos. Si el tipo de elección es un referéndum, también procesa votos afirmativos
#' y negativos.
#'
#' @param df Dataframe con los datos electorales.
#' @param tipo_eleccion Tipo de elección para determinar si se incluyen resultados de referéndum.
#' @return Un dataframe con las categorías de votación y sus totales y porcentajes.
#' @export
#'
#' Dada una tabla de datos, esta función suma los votos y calcula los porcentajes
#' de participación para diferentes categorías como avances de votación, votos en blanco,
#' y votos nulos. Si el tipo de elección es un referéndum, también procesa votos afirmativos
#' y negativos.
#'
#' @param df Dataframe con los datos electorales.
#' @param tipo_eleccion Tipo de elección para determinar si se incluyen resultados de referéndum.
#' @return Un dataframe con las categorías de votación y sus totales y porcentajes.
#' @export
resultados_tabla_participacion<- function(df,tipo_eleccion){
}
#'
#' Dada una tabla de datos, esta función suma los votos y calcula los porcentajes
#' de participación para diferentes categorías como avances de votación, votos en blanco,
#' y votos nulos. Si el tipo de elección es un referéndum, también procesa votos afirmativos
#' y negativos.
#'
#' @param df Dataframe con los datos electorales.
#' @param tipo_eleccion Tipo de elección para determinar si se incluyen resultados de referéndum.
#' @return Un dataframe con las categorías de votación y sus totales y porcentajes.
#' @export
resultados_tabla_participacion<- function(df,tipo_eleccion){
}
#' filtra los datos para esa provincia usando los códigos INE.
#'
#' @param tipo_eleccion Tipo de elección como texto.
#' @param año Año de la elección.
#' @param mes Mes de la elección.
#' @param provincia Nombre de la provincia (opcional).
#' @return Un dataframe invisible con los resultados de participación y una
#'   impresión en consola de los resultados detallados
#' @import dplyr
#' @export
tabla_participacion <- function(tipo_eleccion, año, mes, provincia=NULL) {
ambito='municipio'
if(!is.null(provincia)){
provincia<-tolower(provincia)
}
if(!is.null(provincia)) {
ine_codes <- data.frame(
INE_CODE = as.numeric(c(2, 3, 4, 1, 33, 5, 6, 7, 8, 48, 9, 10, 11, 39, 12, 13, 14, 15,
16, 20, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35,
36, 26, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52)),
PROVINCE = tolower(c("Albacete", "Alicante", "Almería", "Araba/Álava", "Asturias", "Ávila", "Badajoz", "Balears, Illes",
"Barcelona", "Bizkaia", "Burgos", "Cáceres", "Cádiz", "Cantabria", "Castellón", "Ciudad Real",
"Córdoba", "A Coruña", "Cuenca", "Gipuzkoa", "Girona", "Granada", "Guadalajara", "Huelva", "Huesca",
"Jaén", "León", "Lleida", "Lugo", "Madrid", "Málaga", "Murcia", "Navarra", "Ourense", "Palencia",
"Las Palmas", "Pontevedra", "La Rioja", "Salamanca", "Santa Cruz de Tenerife", "Segovia", "Sevilla",
"Soria", "Tarragona", "Teruel", "Toledo", "Valencia", "Valladolid", "Zamora", "Zaragoza",
"Ceuta", "Melilla"))
)
provincia_code <- ine_codes$INE_CODE[ine_codes$PROVINCE == provincia]
if (length(provincia_code) > 0) {
df <- leer_tabla(tipo_eleccion, año, mes, ambito, directorio = "./descargas/", tabla = '05')
df <- df[df$codigo_ine_provincia == provincia_code, ]
df_final <- resultados_tabla_participacion(df,tipo_eleccion)
} else {
stop(paste("Provincia no válida. Lista de provincias válidas:", paste(ine_codes$PROVINCE, collapse=", ")))
}
}
else{
df <- leer_tabla(tipo_eleccion, año, mes, ambito, directorio = "./descargas/", tabla = '05')
df_final <- resultados_tabla_participacion(df,tipo_eleccion)}
return(invisible(df_final))
}
#' Calcula los resultados de participación para un dataframe dado
#' Calcula los resultados de participación para un dataframe dado
#'
#' Dada una tabla de datos, esta función suma los votos y calcula los porcentajes
#' Calcula los resultados de participación para un dataframe dado
#'
#' Dada una tabla de datos, esta función suma los votos y calcula los porcentajes
#' de participación para diferentes categorías como avances de votación, votos en blanco,
#' y votos nulos. Si el tipo de elección es un referéndum, también procesa votos afirmativos
#' Calcula los resultados de participación para un dataframe dado
#'
#' Dada una tabla de datos, esta función suma los votos y calcula los porcentajes
#' de participación para diferentes categorías como avances de votación, votos en blanco,
#' y votos nulos. Si el tipo de elección es un referéndum, también procesa votos afirmativos
#' y negativos.
#'
#' Calcula los resultados de participación para un dataframe dado
#'
#' Dada una tabla de datos, esta función suma los votos y calcula los porcentajes
#' de participación para diferentes categorías como avances de votación, votos en blanco,
#' y votos nulos. Si el tipo de elección es un referéndum, también procesa votos afirmativos
#' y negativos.
#'
#' @param df Dataframe con los datos electorales.
#' @param tipo_eleccion Tipo de elección para determinar si se incluyen resultados de referéndum.
#' Calcula los resultados de participación para un dataframe dado
#'
#' Dada una tabla de datos, esta función suma los votos y calcula los porcentajes
#' de participación para diferentes categorías como avances de votación, votos en blanco,
#' y votos nulos. Si el tipo de elección es un referéndum, también procesa votos afirmativos
#' y negativos.
#'
#' @param df Dataframe con los datos electorales.
#' @param tipo_eleccion Tipo de elección para determinar si se incluyen resultados de referéndum.
#' @return Un dataframe con las categorías de votación y sus totales y porcentajes.
#' @export
#'
#' Dada una tabla de datos, esta función suma los votos y calcula los porcentajes
#' de participación para diferentes categorías como avances de votación, votos en blanco,
#' y votos nulos. Si el tipo de elección es un referéndum, también procesa votos afirmativos
#' y negativos.
#'
#' @param df Dataframe con los datos electorales.
#' @param tipo_eleccion Tipo de elección para determinar si se incluyen resultados de referéndum.
#' @return Un dataframe con las categorías de votación y sus totales y porcentajes.
#' @export
resultados_tabla_participacion<- function(df,tipo_eleccion){
primer_avance<-sum(df$votantes_primer_avance)
segundo_avance<-sum(df$votantes_segundo_avance)
blanco<-sum(df$votos_en_blanco)
nulo<-sum(df$votos_nulos)
if(tolower(tipo_eleccion) == 'referendum' || tolower(tipo_eleccion) == 'referéndum'){
total<-blanco+nulo+sum(df$votos_negativos_referendum)+sum(df$votos_afirmativos_referendum)
}
else{
total<-blanco+nulo+sum(df$votos_candidaturas)
}
resultados_df <- data.frame(
Categoria = c("Primer avance", "Segundo avance", "Votos en blanco", "Votos nulos"),
Total = c(sum(df$votantes_primer_avance, na.rm = TRUE), sum(df$votantes_segundo_avance, na.rm = TRUE),
sum(df$votos_en_blanco, na.rm = TRUE), sum(df$votos_nulos, na.rm = TRUE)),
Porcentaje = c(sum(df$votantes_primer_avance, na.rm = TRUE) / total * 100,
sum(df$votantes_segundo_avance, na.rm = TRUE) / total * 100,
sum(df$votos_en_blanco, na.rm = TRUE) / total * 100,
sum(df$votos_nulos, na.rm = TRUE) / total * 100)
)
# Función auxiliar para añadir filas al dataframe
if(tolower(tipo_eleccion) == 'referendum' || tolower(tipo_eleccion) == 'referéndum'){
afirmativos<-sum(df$votos_afirmativos_referendum)
negativos<-sum(df$votos_negativos_referendum)
votos_referendum <- afirmativos + negativos
referendum_df <- data.frame(
Categoria = c("Votos referéndum", "Votos afirmativos", "Votos negativos"),
Total = c(votos_referendum, afirmativos, negativos),
Porcentaje = c(votos_referendum / total * 100, afirmativos / votos_referendum * 100, negativos / votos_referendum * 100)
)
cat(
sprintf("%-21s | %15s | %12s", "Datos Referéndum", "Totales", "Porcentaje"), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Primer avance", primer_avance, primer_avance / total * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Segundo avance", segundo_avance, segundo_avance / total * 100), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos en blanco", blanco, blanco / total * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos nulos", nulo, nulo / total * 100), "\n",
sprintf("%-21s | %15d | %12.2f%%", "Votos referéndum", votos_referendum, votos_referendum / total * 100), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos afirmativos", afirmativos, afirmativos / votos_referendum * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos negativos", negativos, negativos / votos_referendum * 100), "\n",
"_____________________________________________________________", "\n",
sep=""
)
}else{
votos_candidaturas<-sum(df$votos_candidaturas)
referendum_df <- data.frame(
Categoria = c("Votos candidaturas"),
Total = c(votos_candidaturas),
Porcentaje = c(votos_candidaturas / total * 100)
)
cat(
sprintf("%-20s | %15s | %12s", "Datos ", "Totales", "Porcentaje"), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Primer avance", primer_avance, primer_avance / total * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Segundo avance", segundo_avance, segundo_avance / total * 100), "\n",
"_____________________________________________________________", "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos en blanco", blanco, blanco / total * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos nulos", nulo, nulo / total * 100), "\n",
sprintf("%-20s | %15d | %12.2f%%", "Votos candidaturas", votos_candidaturas, votos_candidaturas / total * 100), "\n",
"_____________________________________________________________", "\n",
sep=""
)
}
resultados_df <- rbind(resultados_df, referendum_df)
return(resultados_df)
}
tabla_participacion('congreso',2019,4)
library(roxygen2)
library(devtools)
document()
document()
library(roxygen2)
library(devtools)
document()
document()
